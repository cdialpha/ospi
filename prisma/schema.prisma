// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    dateJoined    DateTime  @default(now())
    image         String?
    bio           String?
    emailVerified Boolean?  @default(false) // can't figure out if this is NextAuth otb, or did I add? 
    accounts      Account[]
    sessions      Session[]
    posts         Post[]    @relation("PostAuthor")
    comments      Comment[]
    bookmarks     Post[]    @relation("Bookmark")
    twitter       String?
    insta         String?
    facebook      String?
    website       String?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    postId           String    @id @default(cuid())
    title            String
    body             String
    images           String[]
    resolved         Boolean   @default(false)
    resolvedOn       DateTime?
    upVotes          Int       @default(0)
    views            Int       @default(0)
    tags             String[]
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    // editHistory      CommentEdits[]
    author           User      @relation(name: "PostAuthor", fields: [authorId], references: [id])
    authorId         String
    comments         Comment[]
    numberOfComments Int       @default(0)
    bookmarkedBy     User?     @relation(name: "Bookmark", fields: [bookmarkedById], references: [id])
    bookmarkedById   String?
}

// model PostEdit {
//     Post      Comment  @relation(fields: [postId], references: [postId])
//     postId    String
//     text      String
//     createdAt DateTime @default(now())

//     @@unique([postId, createdAt])
// }

model Comment {
    commentId      String   @id @default(cuid())
    text           String   @default("")
    images         String[]
    Post           Post     @relation(fields: [postId], references: [postId])
    postId         String
    createdAt      DateTime @default(now())
    updatedAt      DateTime @updatedAt
    // editHistory    CommentEdits[]
    parentId       String?
    selectedAnswer Boolean  @default(false)
    upVotes        Int      @default(0)
    User           User     @relation(fields: [commentedById], references: [id])
    commentedById  String
    // PostEdit       PostEdit[]
}

// (B) OR THIS ? 
// model RepleisToComments {
//     replyId     String   @id @default(cuid())
//     text        String   @default("")
//     images      String[]
//     Comment     Comment  @relation(fields: [commentId], references: [commentId])
//     commentId   String
//     createdAt   DateTime @default(now())
//     updatedAt   DateTime @updatedAt
//     User        User     @relation(fields: [repliedById], references: [id])
//     repliedById String
// }

// model CommentEdits {
//     Comment    Comment  @relation(fields: [commentId], references: [commentId])
//     commentId  String
//     text       String
//     createdAt  DateTime @default(now())
//     Post       Post?    @relation(fields: [postId], references: [postId])
//     postId 
// }

// model Event {
//     eventId @id @default(cuid()) 
//     action "Comment" "Like" "Edit" 
//     personA User 
//     personB User
// }
