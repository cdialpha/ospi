// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]    @relation("PostAuthor")
    comments      Comment[]
    bookmarks     Post[]    @relation("Bookmark")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Post {
    id               String    @id @default(cuid())
    title            String
    body             String
    resolved         Boolean   @default(false)
    resolvedOn       DateTime?
    upVotes          Int       @default(0)
    views            Int       @default(0)
    images           String[]
    tags             String[]
    createdAt        DateTime  @default(now())
    updatedAt        DateTime  @updatedAt
    author           User      @relation(name: "PostAuthor", fields: [authorId], references: [id])
    authorId         String
    comments         Comment[]
    numberOfComments Int       @default(0)
    bookmarkedBy     User?     @relation(name: "Bookmark", fields: [bookmarkedById], references: [id])
    bookmarkedById   String?
}

model Comment {
    id             String  @id @default(cuid())
    selectedAnswer Boolean @default(false)
    Post           Post    @relation(fields: [postId], references: [id])
    postId         String
    upVotes        Int
    User           User    @relation(fields: [userId], references: [id])
    userId         String
}
